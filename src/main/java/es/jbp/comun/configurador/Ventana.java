package es.jbp.comun.configurador;

import es.jbp.comun.configurador.estructura.Estructura;
import es.jbp.comun.configurador.estructura.Memorando;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 * Ventana principal de la aplicaci√≥n
 *
 * @author jberjano
 */
public class Ventana extends javax.swing.JFrame {

    private static Ventana instancia;

    private Memorando memorando;

    public static Ventana getInstancia() {
        if (instancia == null) {
            instancia = new Ventana();
        }
        return instancia;
    }

    /**
     * Creates new form Ventana
     */
    public Ventana() {
        initComponents();
    }

    public Memorando getMemorando() {
        return memorando;
    }

    static public void error(String mensaje, Exception ex) {
        String texto = mensaje;
        if (ex.getMessage() != null && !ex.getMessage().isEmpty()) {
            texto += ". Causa: " + ex.getMessage();
        }
        JOptionPane.showMessageDialog(Ventana.getInstancia(), texto, "Error", JOptionPane.ERROR_MESSAGE);        
    }

    public void actualizarArbol() {
        panelConfiguracion.actualizarArbolYRestaurarSeleccion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelConfiguracion = new es.jbp.comun.configurador.PanelConfiguracion();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Configurador");
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));
        getContentPane().add(panelConfiguracion);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        String archivoEstructura = "configurador.json";
        if (args.length > 1 && args[0].equals("-g")) {
            String archivoConfiguracion = args[1];
            if (args.length > 2) {
                archivoEstructura = args[2];
            }
            Estructura estructura;
            try {
                // Para generar una estructura a partir de un archivo de propiedades
                estructura = Estructura.importarEstructura(archivoConfiguracion);
            } catch (Exception ex) {
                error("No se ha podido importar la estructura desde el archivo " + archivoConfiguracion, ex);
                //ex.printStackTrace();  
                System.exit(0);
                return;
            }
            Serializacion.serializar(estructura, archivoEstructura);
        } else if (args.length == 1) {
            archivoEstructura = args[0];
        }

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
        }

        final String archivoEstructuraFinal = archivoEstructura;

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                Ventana v = Ventana.getInstancia();
                v.memorando = Memorando.deserializar("configurador.memo");

                Estructura estructura;
                try {
                    estructura = Estructura.deserializar(archivoEstructuraFinal);
                    estructura.cargarValores();
                } catch (Exception ex) {
                    v.error("No se ha podido cargar el archivo " + archivoEstructuraFinal, ex);
                    System.exit(0);
                    return;
                }

                v.setSize(800, 560);
                v.setLocationRelativeTo(null);
                ImageIcon icono = new ImageIcon(getClass().getResource("/es/shs/comun/configurador/imagenes/icono.png"));
                v.setIconImage(icono.getImage());
                v.panelConfiguracion.setEstructura(estructura);
                v.setTitle("Configurador 1.3.1 - " + estructura.getAplicacion() + " " + estructura.getVersion());
                v.setVisible(true);
            }
        }
        );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private es.jbp.comun.configurador.PanelConfiguracion panelConfiguracion;
    // End of variables declaration//GEN-END:variables

}
